{"version":3,"sources":["Error.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","props","removeMemberFromList","member","membersList","state","teamMembers","index","indexOf","splice","setState","createWheelUrl","createMemberTag","className","key","src","ErrorIcon","alt","size","onClick","createMemberTags","memberList","map","iframeSrc","length","rootSrc","this","width","height","scrolling","frameborder","title","placeholder","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oGAAAA,EAAOC,QAAU,IAA0B,mC,+MCiH5BC,G,wDA5Gd,WAAYC,GAAQ,IAAD,8BAClB,cAAMA,IAaPC,qBAAuB,SAAAC,GACtB,IAAIC,EAAW,YAAO,EAAKC,MAAMC,aAC7BC,EAAQH,EAAYI,QAAQL,IACjB,IAAXI,IACHH,EAAYK,OAAOF,EAAO,GAC1B,EAAKG,SAAS,CAAEJ,YAAaF,IAAe,WAC3C,EAAKO,sBApBW,EAyBnBC,gBAAkB,SAAAT,GACjB,OACC,yBAAKU,UAAU,aAAaC,IAAG,UAAKX,IAClCA,EACD,8BACC,yBACUU,UAAU,oBACVE,IAAKC,IACLC,IAAI,QACbC,KAAM,GACNC,QAAS,kBAAM,EAAKjB,qBAAqBC,SAnC3B,EA0CnBiB,iBAAmB,SAAAC,GAClB,OAAOA,EAAWC,KAAI,SAAAnB,GAAM,OAAI,EAAKS,gBAAgBT,OA3CnC,EA8CnBQ,eAAiB,WAChB,IAAIY,EAAY,iCAChB,EAAKlB,MAAMC,YAAYgB,KAAI,SAACnB,EAAQI,GAElCgB,EADGhB,EAAQ,EAAI,EAAKF,MAAMC,YAAYkB,OAC7B,UAAMD,EAAN,YAAmBhB,EAAQ,EAA3B,YAAgCJ,EAAhC,KAEA,UAAMoB,EAAN,YAAmBhB,EAC3B,EADQ,YACHJ,EADG,sCAIX,EAAKO,SAAS,CAAEe,QAASF,KAtDzB,EAAKlB,MAAQ,CACZC,YAAa,CAChB,SAAU,QAAS,aAAc,WAAY,QAAS,OAAQ,SAAU,SAAU,MAAO,SAAU,OAAQ,SAExGmB,QAAS,IANQ,E,iEAWlBC,KAAKf,mB,+BAiDL,OACC,yBAAKE,UAAU,uBACd,4BAAQA,UAAU,gBAAlB,uBACA,yBAAKA,UAAU,gBACd,yBAAKA,UAAU,0BACd,yBAAKA,UAAU,iCAAf,iBAGD,yBAAKA,UAAU,gBACba,KAAKN,iBAAiBM,KAAKrB,MAAMC,eAKnC,yBAAKO,UAAU,wBACd,4BACCE,IAAKW,KAAKrB,MAAMoB,QAChBE,MAAM,MACNC,OAAO,MACPC,UAAU,KACHC,YAAY,IACZC,MAAM,uBAGf,yBAAKlB,UAAU,mBACd,yBAAKA,UAAU,0BAAf,UAGA,yBAAKA,UAAU,SACd,wCACA,8BAAUmB,YAAY,YAEvB,yBAAKnB,UAAU,SACd,wCACA,8BAAUmB,YAAY,YAEvB,yBAAKnB,UAAU,SACd,wCACA,8BAAUmB,YAAY,cAIzB,4BAAQnB,UAAU,kBAAlB,sC,GAvGcoB,cCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.c3241aa9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Error.242f8185.svg\";","import React, { Component } from \"react\";\nimport ErrorIcon from './Error.svg';\nimport \"./App.scss\";\n\nclass App extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tteamMembers: [\t\t\n\"Murari\", \"Jhaji\", \"Amit Singh\", \"Muchchad\", \"Lambu\", \"Kida\", \"Potter\", \"Prabhu\", \"Ele\", \"Rahman\", \"Bhai\", \"Patha\"\n\t\t\t],\n\t\t\trootSrc: \"\"\n\t\t};\n\t}\n\n\tcomponentWillMount() {\n\t\tthis.createWheelUrl();\n\t}\n\n\tremoveMemberFromList = member => {\n\t\tlet membersList = [...this.state.teamMembers];\n\t\tvar index = membersList.indexOf(member);\n\t\tif (index !== -1) {\n\t\t\tmembersList.splice(index, 1);\n\t\t\tthis.setState({ teamMembers: membersList }, () => {\n\t\t\t\tthis.createWheelUrl();\n\t\t\t});\n\t\t}\n\t};\n\n\tcreateMemberTag = member => {\n\t\treturn (\n\t\t\t<div className=\"search-tag\" key={`${member}`}>\n\t\t\t\t{member}\n\t\t\t\t<span>\n\t\t\t\t\t<img\n            \t\t\tclassName=\"search-tag-remove\"\n            \t\t\tsrc={ErrorIcon}\n            \t\t\talt=\"error\"\n\t\t\t\t\t\tsize={20}\n\t\t\t\t\t\tonClick={() => this.removeMemberFromList(member)}\n\t\t\t\t\t/>\n\t\t\t\t</span>\n\t\t\t</div>\n\t\t);\n\t};\n\n\tcreateMemberTags = memberList => {\n\t\treturn memberList.map(member => this.createMemberTag(member));\n\t};\n\n\tcreateWheelUrl = () => {\n\t\tlet iframeSrc = \"https://wheeldecide.com/e.php?\";\n\t\tthis.state.teamMembers.map((member, index) => {\n\t\t\tif (index + 1 < this.state.teamMembers.length) {\n\t\t\t\tiframeSrc = `${iframeSrc}c${index + 1}=${member}&`;\n\t\t\t} else {\n\t\t\t\tiframeSrc = `${iframeSrc}c${index +\n\t\t\t\t\t1}=${member}&t=Commerce+Intelligence&time=1`;\n\t\t\t}\n\t\t});\n\t\tthis.setState({ rootSrc: iframeSrc });\n\t};\n\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"home-page-container\">\n\t\t\t\t<header className=\"company-name\">Ludo Premier League</header>\n\t\t\t\t<div className=\"main-content\">\n\t\t\t\t\t<div className=\"members-list-container\">\n\t\t\t\t\t\t<div className=\"members-list-container-header\">\n\t\t\t\t\t\t\tPLAYERS LIST:\n\t\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"members-list\">\n\t\t\t\t\t\t{this.createMemberTags(this.state.teamMembers)}\n\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t\n\n\t\t\t\t\t<div className=\"spin-wheel-container\">\n\t\t\t\t\t\t<iframe\n\t\t\t\t\t\t\tsrc={this.state.rootSrc}\n\t\t\t\t\t\t\twidth=\"500\"\n\t\t\t\t\t\t\theight=\"500\"\n\t\t\t\t\t\t\tscrolling=\"no\"\n              frameborder=\"0\"\n              title=\"spin-wheel-iframe\"\n\t\t\t\t\t\t></iframe>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"teams-container\">\n\t\t\t\t\t\t<div className='teams-container-header'>\n\t\t\t\t\t\t\tTeams:\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className=\"team1\">\n\t\t\t\t\t\t\t<div>Team 1:</div>\n\t\t\t\t\t\t\t<textarea placeholder=\"Team 1\"></textarea>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className=\"team1\">\n\t\t\t\t\t\t\t<div>Team 2:</div>\n\t\t\t\t\t\t\t<textarea placeholder=\"Team 2\"></textarea>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className=\"team1\">\n\t\t\t\t\t\t\t<div>Team 3:</div>\n\t\t\t\t\t\t\t<textarea placeholder=\"Team 3\"></textarea>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<footer className=\"footer-content\">Courtesy: IT 2K10, BIT Sindri</footer>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}